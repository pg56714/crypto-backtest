import ccxt
import pandas as pd
import time
from tqdm import tqdm
from concurrent.futures import ThreadPoolExecutor, as_completed

# ========================
# ÂèÉÊï∏Ë®≠ÂÆö
# ========================
exchange = ccxt.binance({"rateLimit": 1200, "enableRateLimit": True})

symbols = [
    "BTC/USDT",
    "ETH/USDT",
    "BNB/USDT",
    "SOL/USDT",
    "XRP/USDT",
    "ADA/USDT",
    "AVAX/USDT",
    "LINK/USDT",
    "DOT/USDT",
    "TRX/USDT",
]

timeframe = "1h"
limit = 1500
start_date = "2020-10-13T00:00:00Z"
since = exchange.parse8601(start_date)


# ========================
# ÊäìË≥áÊñôÂáΩÂºè
# ========================
def fetch_historical_data(
    symbol, timeframe, since, limit, max_loops=100, sleep_sec=0.5
):
    all_data = []
    loops = 0

    while loops < max_loops:
        try:
            ohlcv = exchange.fetch_ohlcv(symbol, timeframe, since=since, limit=limit)
            if not ohlcv:
                break

            last_timestamp = ohlcv[-1][0]
            if last_timestamp <= since:
                break

            df = pd.DataFrame(
                ohlcv, columns=["timestamp", "open", "high", "low", "close", "volume"]
            )
            df["timestamp"] = pd.to_datetime(df["timestamp"], unit="ms")
            df.set_index("timestamp", inplace=True)
            df = df[["close"]]
            df.columns = [symbol.replace("/", "")]
            all_data.append(df)

            since = last_timestamp + 1
            loops += 1
            time.sleep(sleep_sec)
        except Exception as e:
            tqdm.write(f"[‚ùå] ÊäìÂèñ {symbol} ÁôºÁîüÈåØË™§Ôºö{e}")
            break

    return symbol, pd.concat(all_data) if all_data else pd.DataFrame()


# ========================
# ‰∏ªÁ®ãÂºè
# ========================
def main():
    print(f"üìä ÈñãÂßãÊèêÂèñÊ≠∑Âè≤Êï∏ÊìöÔºö{timeframe} Âæû {start_date}")
    results = {}

    with ThreadPoolExecutor(max_workers=5) as executor:
        futures = {
            executor.submit(
                fetch_historical_data, symbol, timeframe, since, limit
            ): symbol
            for symbol in symbols
        }

        # Áî® tqdm ÂåÖ‰Ωè as_completedÔºåÈ°ØÁ§∫„ÄåÂÆåÊàêÁöÑÂπ£Á®Æ„ÄçÊï∏Èáè
        for future in tqdm(
            as_completed(futures), total=len(symbols), desc="ÊèêÂèñÈÄ≤Â∫¶", unit="Âπ£Á®Æ"
        ):
            symbol = futures[future]
            try:
                symbol, df = future.result()
                if not df.empty:
                    results[symbol] = df
                    tqdm.write(f"‚úÖ {symbol} ÂÆåÊàêÔºåÂÖ± {len(df)} Á≠Ü")
                else:
                    tqdm.write(f"[‚ö†Ô∏è] {symbol} ÁÑ°Ë≥áÊñô")
            except Exception as e:
                tqdm.write(f"[‚ùå] {symbol} ÁôºÁîüÈåØË™§Ôºö{e}")

    if results:
        price_df = pd.concat(results.values(), axis=1)
        price_df.dropna(inplace=True)
        price_df.to_csv("crypto_historical_data.csv")
        print("üìÅ Â∑≤ÂÑ≤Â≠òÂà∞ crypto_historical_data.csv")
    else:
        print("[‚ùå] Ê≤íÊúâÊàêÂäüÊäìÂèñÁöÑË≥áÊñô")


# ========================
# Âü∑Ë°å
# ========================
if __name__ == "__main__":
    main()
